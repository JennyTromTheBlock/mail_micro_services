version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # RabbitMQ messaging
      - "15672:15672" # Web UI
    networks:
      - enron_network


  # Zipkin service (microservice for tracing)
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    environment:
      - ZIPKIN_HTTP_PORT=9411
    ports:
      - "9411:9411"  # Zipkin UI og API
    networks:
      - enron_network
    restart: always

  # Seq service (log-metrics exporter)
  seq:
    image: datalust/seq
    container_name: seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:80"  # Web UI og API
    networks:
      - enron_network


  # OpenTelemetry Collector service
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    volumes:
      - ./otel-collector/otel-collector-config.yaml:/etc/otel/config.yaml  # Indlæs OpenTelemetry Collector konfiguration
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
    networks:
      - enron_network
    environment:
      - COLLECTOR_ZIPKIN_ENDPOINT=http://zipkin:9411/api/v2/spans
      - COLLECTOR_SEQ_ENDPOINT=http://seq:5341
      - LOGGING_LEVEL=debug
    depends_on:
      - zipkin
      - seq

  frontend:
    build: ./frontend_search
    ports:
      - "5000:3000"
    restart: always
    environment:
      - PORT= "3000"


  collector:
    build: ./collector
    container_name: collector
    depends_on:
      - rabbitmq
    volumes:
      - ./maildir:/app/maildir  # Binder den eksterne emails-mappe til containerens /app/emails
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_QUEUE=file_paths
      - BATCH_SIZE=1000
      - WATCH_DIRECTORY=/data
    ports:
      - "8000:8000"  # Exponer API’en på port 8001
    networks:
      - enron_network
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  cleaner:
    build: ./cleaner
    container_name: cleaner
    environment:
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - rabbitmq
    ports:
      - "8001:8001"  # Exponer API’en på port 8000
    networks:
      - enron_network
    volumes:
      - ./maildir:/app/maildir  # Binder den eksterne emails-mappe til containerens /app/emails


  mariadb:
    image: mariadb:latest
    container_name: mariadb_container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: WordOccurrencesDB
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    ports:
      - "3300:3306"  # Binder port 3300 på værten til 3306 inde i containeren
    networks:
      - enron_network
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./indexer/init.sql:/docker-entrypoint-initdb.d/init.sql

  indexer:
    build: ./indexer
    deploy:
      replicas: 2
    depends_on:
      - mariadb
    networks:
      - enron_network
    environment:
      - DATABASE_URL=mysql+aiomysql://myuser:mypassword@mariadb_container1:3306/WordOccurrencesDB
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      # Hvis du har brug for at tilføje flere miljøvariabler, gør det her





  searcher:
      build: ./searcher
      container_name: searcher
      depends_on:
        - mariadb  # Sørger for at mariadb containeren starter før indexer
      networks:
        - enron_network
      ports:
        - "8003:8002"  # Exponer API’en på port 8000
      environment:
        - DATABASE_URL=mysql+aiomysql://myuser:mypassword@mariadb_container1:3306/WordOccurrencesDB


networks:
  enron_network:
    driver: bridge

volumes:
  mariadb_data: